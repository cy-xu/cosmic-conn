import os

import numpy as np
from astropy.io import fits
import matplotlib.pyplot as plt


source_dir = 'data/pod_sync/SEP_dilation5'
dirs_to_check = ['masked_fits']
save_path = 'paper_utils/train_set_stats.pdf'
title = 'Train Set Distribution by Month and Telescope Class'

# source_dir = 'data/pod_sync/SEP_TEST_SET'
# dirs_to_check = ['aligned_fits']
# save_path = 'paper_utils/test_set_stats.pdf'
# title = 'Test Set Distribution by Month and Telescope Class'

plot_month = True

samples = {}

for root, dirs, files in os.walk(source_dir):
    if os.path.basename(root) in dirs_to_check:
        # avoid temp files generated by Mac's Finder
        files = [f for f in files if not f[0] == '.']

        for f in files:
            site = f[:3]
            telescope_class = f[3:6]
            year = f[14:18]
            month = f[18:20]

            samples[f] = [site, telescope_class, year, month]


labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
# sites = [value[0] for key, value in samples.item()]
# clases = [value[1] for key, value in samples.item()]
# months = [value[3] for key, value in samples.item()]

if plot_month:

    m4 = np.zeros(12)
    m2 = np.zeros(12)
    m1 = np.zeros(12)

    for key, value in samples.items():
        month_idx = int(value[3]) - 1

        if value[1] == '0m4':
            m4[month_idx] += 3
        elif value[1] == '1m0':
            m1[month_idx] += 3
        elif value[1] == '2m0':
            m2[month_idx] += 3
        else:
            print(f'{value[3]} not recognized')


    plt.rcParams.update({'font.size': 12})

    f = plt.figure(figsize=(8, 3))
    # plt.suptitle('Receiver Operating Characteristic', fontsize=14)
    # fsize = 12

    ax = f.add_subplot()
    # fig, ax = plt.subplots()
    width = 0.8

    sum_m4m1 = m4 + m1

    ax.bar(labels, m4, width, label='0.4 m')
    ax.bar(labels, m1, width, bottom=m4, label='1 m')
    ax.bar(labels, m2, width, bottom=sum_m4m1, label='2 m')

    ax.set_ylabel('Images')
    # ax.set_title(title)
    ax.legend()

    plt.savefig(save_path, bbox_inches='tight')